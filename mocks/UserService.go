// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	models "github.com/DaZZler12/MyRestServer/pkg/models"
	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// DeleteItemById provides a mock function with given fields: id
func (_m *UserService) DeleteItemById(id primitive.ObjectID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteItemByName provides a mock function with given fields: name
func (_m *UserService) DeleteItemByName(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllItems provides a mock function with given fields: start, end, filters
func (_m *UserService) GetAllItems(start int, end int, filters primitive.D) ([]models.Item, int64, error) {
	ret := _m.Called(start, end, filters)

	var r0 []models.Item
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, primitive.D) ([]models.Item, int64, error)); ok {
		return rf(start, end, filters)
	}
	if rf, ok := ret.Get(0).(func(int, int, primitive.D) []models.Item); ok {
		r0 = rf(start, end, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, primitive.D) int64); ok {
		r1 = rf(start, end, filters)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int, primitive.D) error); ok {
		r2 = rf(start, end, filters)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetItemByID provides a mock function with given fields: id
func (_m *UserService) GetItemByID(id primitive.ObjectID) (models.Item, error) {
	ret := _m.Called(id)

	var r0 models.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) (models.Item, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) models.Item); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Item)
	}

	if rf, ok := ret.Get(1).(func(primitive.ObjectID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItemByName provides a mock function with given fields: filter
func (_m *UserService) GetItemByName(filter primitive.M) (models.Item, error) {
	ret := _m.Called(filter)

	var r0 models.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(primitive.M) (models.Item, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(primitive.M) models.Item); ok {
		r0 = rf(filter)
	} else {
		r0 = ret.Get(0).(models.Item)
	}

	if rf, ok := ret.Get(1).(func(primitive.M) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertItem provides a mock function with given fields: data
func (_m *UserService) InsertItem(data models.Item) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Item) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SignIn provides a mock function with given fields: email, password
func (_m *UserService) SignIn(email string, password string) (models.User, error) {
	ret := _m.Called(email, password)

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (models.User, error)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) models.User); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignUp provides a mock function with given fields: data
func (_m *UserService) SignUp(data models.User) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.User) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateItemByID provides a mock function with given fields: data, id
func (_m *UserService) UpdateItemByID(data models.Item, id primitive.ObjectID) error {
	ret := _m.Called(data, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Item, primitive.ObjectID) error); ok {
		r0 = rf(data, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateItemByName provides a mock function with given fields: data, name
func (_m *UserService) UpdateItemByName(data models.Item, name string) error {
	ret := _m.Called(data, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Item, string) error); ok {
		r0 = rf(data, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
