// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	models "github.com/DaZZler12/MyRestServer/pkg/models"
	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// Count provides a mock function with given fields: filter
func (_m *Store) Count(filter primitive.D) (int64, error) {
	ret := _m.Called(filter)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(primitive.D) (int64, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(primitive.D) int64); ok {
		r0 = rf(filter)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(primitive.D) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteItemById provides a mock function with given fields: filter
func (_m *Store) DeleteItemById(filter primitive.M) error {
	ret := _m.Called(filter)

	var r0 error
	if rf, ok := ret.Get(0).(func(primitive.M) error); ok {
		r0 = rf(filter)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteItemByName provides a mock function with given fields: filter
func (_m *Store) DeleteItemByName(filter primitive.M) error {
	ret := _m.Called(filter)

	var r0 error
	if rf, ok := ret.Get(0).(func(primitive.M) error); ok {
		r0 = rf(filter)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllItems provides a mock function with given fields: start, end, filters
func (_m *Store) GetAllItems(start int, end int, filters primitive.D) ([]models.Item, int64, error) {
	ret := _m.Called(start, end, filters)

	var r0 []models.Item
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, primitive.D) ([]models.Item, int64, error)); ok {
		return rf(start, end, filters)
	}
	if rf, ok := ret.Get(0).(func(int, int, primitive.D) []models.Item); ok {
		r0 = rf(start, end, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, primitive.D) int64); ok {
		r1 = rf(start, end, filters)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int, primitive.D) error); ok {
		r2 = rf(start, end, filters)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetItemByID provides a mock function with given fields: filter
func (_m *Store) GetItemByID(filter primitive.M) (models.Item, error) {
	ret := _m.Called(filter)

	var r0 models.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(primitive.M) (models.Item, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(primitive.M) models.Item); ok {
		r0 = rf(filter)
	} else {
		r0 = ret.Get(0).(models.Item)
	}

	if rf, ok := ret.Get(1).(func(primitive.M) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItemByModelBrand provides a mock function with given fields: filter
func (_m *Store) GetItemByModelBrand(filter primitive.M) (models.Item, error) {
	ret := _m.Called(filter)

	var r0 models.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(primitive.M) (models.Item, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(primitive.M) models.Item); ok {
		r0 = rf(filter)
	} else {
		r0 = ret.Get(0).(models.Item)
	}

	if rf, ok := ret.Get(1).(func(primitive.M) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItemByName provides a mock function with given fields: filter
func (_m *Store) GetItemByName(filter primitive.M) (models.Item, error) {
	ret := _m.Called(filter)

	var r0 models.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(primitive.M) (models.Item, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(primitive.M) models.Item); ok {
		r0 = rf(filter)
	} else {
		r0 = ret.Get(0).(models.Item)
	}

	if rf, ok := ret.Get(1).(func(primitive.M) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByEmail provides a mock function with given fields: filter
func (_m *Store) GetUserByEmail(filter primitive.M) (models.User, error) {
	ret := _m.Called(filter)

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(primitive.M) (models.User, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(primitive.M) models.User); ok {
		r0 = rf(filter)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(primitive.M) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertItem provides a mock function with given fields: data
func (_m *Store) InsertItem(data models.Item) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Item) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertUser provides a mock function with given fields: data
func (_m *Store) InsertUser(data models.User) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.User) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateItemByID provides a mock function with given fields: filter, updater
func (_m *Store) UpdateItemByID(filter primitive.M, updater primitive.M) error {
	ret := _m.Called(filter, updater)

	var r0 error
	if rf, ok := ret.Get(0).(func(primitive.M, primitive.M) error); ok {
		r0 = rf(filter, updater)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateItemByName provides a mock function with given fields: filter, updater
func (_m *Store) UpdateItemByName(filter primitive.M, updater primitive.M) error {
	ret := _m.Called(filter, updater)

	var r0 error
	if rf, ok := ret.Get(0).(func(primitive.M, primitive.M) error); ok {
		r0 = rf(filter, updater)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
