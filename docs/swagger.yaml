basePath: /
definitions:
  gin.H:
    additionalProperties: {}
    type: object
  github_com_DaZZler12_MyRestServer_pkg_models.Item:
    properties:
      brand:
        type: string
      created_at:
        type: string
      id:
        type: string
      item_name:
        type: string
      model:
        type: string
      price:
        type: number
      updated_at:
        type: string
      year:
        type: integer
    type: object
  github_com_DaZZler12_MyRestServer_pkg_models.User:
    properties:
      country:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  github_com_DaZZler12_MyRestServer_pkg_models.UserInput:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  pkg_handlers.GetAllItemsResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/github_com_DaZZler12_MyRestServer_pkg_models.Item'
        type: array
      totalPages:
        type: integer
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server celler server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /api/items:
    delete:
      consumes:
      - application/json
      description: Delete an item based on its Item_Name
      parameters:
      - description: Item_Name
        in: path
        name: nameParam
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'message": "Deleted successfully'
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: 'message": "Failed to retrieve item'
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: 'message": "Internal Server Error'
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete item by Item_Name
      tags:
      - Items
    get:
      consumes:
      - application/json
      description: Retrieve all items with pagination and also an optional query param
        added as brand
      parameters:
      - description: Start index for pagination
        in: query
        name: _start
        type: integer
      - description: End index for pagination
        in: query
        name: _end
        type: integer
      - description: Brand filter
        in: query
        name: brand
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/pkg_handlers.GetAllItemsResponse'
        "400":
          description: 'message: Invalid Start or End Value'
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: 'message": "Internal Server Error'
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get all items with pagination and optional query param as brand
      tags:
      - Items
    post:
      consumes:
      - application/json
      description: Insert a new item with the provided details
      parameters:
      - description: Item details
        in: body
        name: itemData
        required: true
        schema:
          $ref: '#/definitions/github_com_DaZZler12_MyRestServer_pkg_models.Item'
      produces:
      - application/json
      responses:
        "201":
          description: success
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: 'message: Bad Request'
          schema:
            $ref: '#/definitions/gin.H'
      summary: Insert a new item
      tags:
      - Items
    put:
      consumes:
      - application/json
      description: Update an existing item with the provided details
      parameters:
      - description: Item item_name
        in: path
        name: name
        required: true
        type: string
      - description: Item details
        in: body
        name: itemData
        required: true
        schema:
          $ref: '#/definitions/github_com_DaZZler12_MyRestServer_pkg_models.Item'
      produces:
      - application/json
      responses:
        "200":
          description: 'message": "Updated successfully'
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a item by Name
      tags:
      - Items
  /api/signin:
    post:
      consumes:
      - application/json
      description: Sign in user with email and generate token
      parameters:
      - description: User input data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/github_com_DaZZler12_MyRestServer_pkg_models.UserInput'
      produces:
      - application/json
      responses:
        "200":
          description: 'message": "Log in success'
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: 'message": "Internal Server Error'
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create an Item
      tags:
      - Authentication
  /api/signup:
    post:
      consumes:
      - application/json
      description: Register a new user account with the provided details
      parameters:
      - description: User details
        in: body
        name: userData
        required: true
        schema:
          $ref: '#/definitions/github_com_DaZZler12_MyRestServer_pkg_models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: 'message": "Internal Server Error'
          schema:
            $ref: '#/definitions/gin.H'
      summary: Register a new user account
      tags:
      - Users
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
